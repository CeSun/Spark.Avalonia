//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Spark {
    using System;
    
    
    /// <summary>
    ///   一个强类型的资源类，用于查找本地化的字符串等。
    /// </summary>
    // 此类是由 StronglyTypedResourceBuilder
    // 类通过类似于 ResGen 或 Visual Studio 的工具自动生成的。
    // 若要添加或移除成员，请编辑 .ResX 文件，然后重新运行 ResGen
    // (以 /str 作为命令选项)，或重新生成 VS 项目。
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class SparkResource {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal SparkResource() {
        }
        
        /// <summary>
        ///   返回此类使用的缓存的 ResourceManager 实例。
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Spark.SparkResource", typeof(SparkResource).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   重写当前线程的 CurrentUICulture 属性，对
        ///   使用此强类型资源类的所有资源查找执行重写。
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///precision mediump float;
        ///
        ///out vec4 glColor;
        ///uniform float AmbientStrength;
        ///
        ///uniform sampler2D BaseColor;
        ///in vec2 OutTexCoord;
        ///
        ///
        ///void main()
        ///{
        ///	vec4 BaseColor = texture(BaseColor, OutTexCoord);
        ///#ifndef _PREZ_ 
        ///	if (BaseColor.a &lt;= 0.0)
        ///		discard;
        ///#endif
        ///	glColor = BaseColor * AmbientStrength;
        ///} 的本地化字符串。
        /// </summary>
        internal static string AmbientLight_frag {
            get {
                return ResourceManager.GetString("AmbientLight.frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 struct PassToFrag
        ///{
        ///	// 片段世界空间坐标
        ///	vec4 Position;
        ///	// 片段世界空间法线
        ///	vec3 Normal;
        ///	// 顶点颜色
        ///	vec3 Color;
        ///	// UV坐标
        ///	vec2 TexCoord;
        ///	// 摄像机世界空间坐标
        ///	vec3 CameraPosition;
        ///	// 光源颜色
        ///	vec3 LightColor;
        ///	// 片段切线空间坐标
        ///	vec3 TangentPosition;
        ///	// 摄像机切线空间坐标
        ///	vec3 CameraTangentPosition;
        ///	// 间接光强度
        ///	float IndirectLightStrength;
        ///#ifdef _DIRECTIONLIGHT_
        ///	// 定向光朝向
        ///	vec3 LightTangentDirection;
        ///#endif
        ///#ifdef _POINTLIGHT_
        ///	vec3 LightPosition;
        ///	vec3 LightTangentPosition;
        ///	float AttenuationFactor;
        ///#endif
        ///};
        ///
        /// [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string Common_glsl {
            get {
                return ResourceManager.GetString("Common.glsl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///precision mediump float;
        ///#include &lt;Common.glsl&gt;
        ///out vec4 glColor;
        ///
        ///
        ///in PassToFrag passToFrag;
        ///
        ///#ifdef _SHADERMODEL_BLINNPHONG_
        ///uniform	sampler2D BaseColorTexture;
        ///uniform	sampler2D NormalTexture;
        ///#endif
        ///
        ///void main()
        ///{
        ///	vec4 BaseColor = texture(BaseColorTexture, passToFrag.TexCoord);
        ///#ifndef _PREZ_
        ///	if (BaseColor.a &lt;= 0.1)
        ///		discard;
        ///#endif
        ///	// vec4 Normal = texture(NormalTexture, passToFrag.TexCoord);
        ///
        ///#ifdef _SHADERMODEL_BLINNPHONG_
        ///	glColor = BlinnPhongDirectionShadi [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string Light_frag {
            get {
                return ResourceManager.GetString("Light.frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///precision mediump float;
        ///#include &lt;Common.glsl&gt;
        ///layout(location=0) in vec3 Position;
        ///layout(location=1) in vec3 Normal;
        ///layout(location=2) in vec3 Tangent;
        ///layout(location=3) in vec3 BitTangent;
        ///layout(location=4) in vec3 Color;
        ///layout(location=5) in vec2 TexCoord;
        ///
        ///uniform mat4 Projection;
        ///uniform mat4 View;
        ///uniform mat4 Model;
        ///
        ///out PassToFrag passToFrag;
        ///
        ///uniform LightInfo lightInfo;
        ///
        ///void main()
        ///{
        ///	vec3 T = normalize(vec3(Model * vec4(Tangent,   0.0)));
        ///	vec3 B = norm [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string Light_vert {
            get {
                return ResourceManager.GetString("Light.vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///precision mediump float;
        ///
        ///#ifdef _BLENDMODE_MASKED_ 
        ///uniform sampler2D BaseColor;
        ///in vec2 OutTexCoord;
        ///#endif
        ///
        ///
        ///
        ///void main()
        ///{
        ///#ifdef _BLENDMODE_MASKED_ 
        ///	vec4 BaseColor = texture(BaseColor, OutTexCoord);
        ///	if (BaseColor.a &lt;= 0.0)
        ///		discard;
        ///#endif
        ///} 的本地化字符串。
        /// </summary>
        internal static string PreZ_frag {
            get {
                return ResourceManager.GetString("PreZ.frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 #version 300 es
        ///precision mediump float;
        ///layout(location=0) in vec3 Position;
        ///layout(location=5) in vec2 TexCoord;
        ///
        ///uniform mat4 Projection;
        ///uniform mat4 View;
        ///uniform mat4 Model;
        ///
        ///#ifdef _BLENDMODE_MASKED_
        ///out vec2 OutTexCoord;
        ///#endif
        ///
        ///#ifdef _SHADERMODEL_BLINNPHONG_LAMBERT_
        ///out vec2 OutTexCoord;
        ///#endif
        ///
        ///void main()
        ///{
        ///#ifdef _BLENDMODE_MASKED_
        ///	OutTexCoord = TexCoord;
        ///#endif
        ///#ifdef _SHADERMODEL_BLINNPHONG_LAMBERT_
        ///	OutTexCoord = TexCoord;
        ///#endif
        ///	gl_Position = Projection * View * M [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string PreZ_vert {
            get {
                return ResourceManager.GetString("PreZ.vert", resourceCulture);
            }
        }
    }
}
